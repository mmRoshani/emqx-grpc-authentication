%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(grpc_auth_authentication_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type access_token() ::
      #{access_token            => iodata()         % = 1
       }.

-type auth_token() ::
      #{cid                     => iodata(),        % = 1
        aid                     => iodata(),        % = 2
        uid                     => iodata(),        % = 3
        subjects                => iodata(),        % = 4
        scopes                  => iodata(),        % = 5
        session                 => iodata(),        % = 6
        client_id               => iodata(),        % = 7
        iat                     => integer(),       % = 9, 64 bits
        exp                     => integer()        % = 10, 64 bits
       }.

-export_type(['access_token'/0, 'auth_token'/0]).

-spec encode_msg(access_token() | auth_token(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(access_token() | auth_token(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        access_token ->
            encode_msg_access_token(id(Msg, TrUserData),
                                    TrUserData);
        auth_token ->
            encode_msg_auth_token(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_access_token(Msg, TrUserData) ->
    encode_msg_access_token(Msg, <<>>, TrUserData).


encode_msg_access_token(#{} = M, Bin, TrUserData) ->
    case M of
        #{access_token := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_auth_token(Msg, TrUserData) ->
    encode_msg_auth_token(Msg, <<>>, TrUserData).


encode_msg_auth_token(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{cid := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{aid := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{uid := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{subjects := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{scopes := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false ->
                             e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{session := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     case is_empty_string(TrF6) of
                         true -> B5;
                         false ->
                             e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    B7 = case M of
             #{client_id := F7} ->
                 begin
                     TrF7 = id(F7, TrUserData),
                     case is_empty_string(TrF7) of
                         true -> B6;
                         false ->
                             e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
                     end
                 end;
             _ -> B6
         end,
    B8 = case M of
             #{iat := F8} ->
                 begin
                     TrF8 = id(F8, TrUserData),
                     if TrF8 =:= 0 -> B7;
                        true ->
                            e_type_int64(TrF8, <<B7/binary, 72>>, TrUserData)
                     end
                 end;
             _ -> B7
         end,
    case M of
        #{exp := F9} ->
            begin
                TrF9 = id(F9, TrUserData),
                if TrF9 =:= 0 -> B8;
                   true ->
                       e_type_int64(TrF9, <<B8/binary, 80>>, TrUserData)
                end
            end;
        _ -> B8
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(access_token, Bin, TrUserData) ->
    id(decode_msg_access_token(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(auth_token, Bin, TrUserData) ->
    id(decode_msg_auth_token(Bin, TrUserData), TrUserData).



decode_msg_access_token(Bin, TrUserData) ->
    dfp_read_field_def_access_token(Bin,
                                    0,
                                    0,
                                    id(<<>>, TrUserData),
                                    TrUserData).

dfp_read_field_def_access_token(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, TrUserData) ->
    d_field_access_token_access_token(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
dfp_read_field_def_access_token(<<>>, 0, 0, F@_1, _) ->
    #{access_token => F@_1};
dfp_read_field_def_access_token(Other, Z1, Z2, F@_1,
                                TrUserData) ->
    dg_read_field_def_access_token(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData).

dg_read_field_def_access_token(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_access_token(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   TrUserData);
dg_read_field_def_access_token(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_access_token_access_token(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_access_token(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_access_token(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_access_token(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                3 ->
                    skip_group_access_token(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            TrUserData);
                5 -> skip_32_access_token(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_access_token(<<>>, 0, 0, F@_1, _) ->
    #{access_token => F@_1}.

d_field_access_token_access_token(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_access_token_access_token(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
d_field_access_token_access_token(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_access_token(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    TrUserData).

skip_varint_access_token(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, TrUserData) ->
    skip_varint_access_token(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData);
skip_varint_access_token(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, TrUserData) ->
    dfp_read_field_def_access_token(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_length_delimited_access_token(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_access_token(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
skip_length_delimited_access_token(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_access_token(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    TrUserData).

skip_group_access_token(Bin, FNum, Z2, F@_1,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_access_token(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_32_access_token(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, TrUserData) ->
    dfp_read_field_def_access_token(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_64_access_token(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, TrUserData) ->
    dfp_read_field_def_access_token(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

decode_msg_auth_token(Bin, TrUserData) ->
    dfp_read_field_def_auth_token(Bin,
                                  0,
                                  0,
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(0, TrUserData),
                                  id(0, TrUserData),
                                  TrUserData).

dfp_read_field_def_auth_token(<<10, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_cid(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
dfp_read_field_def_auth_token(<<18, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_aid(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
dfp_read_field_def_auth_token(<<26, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_uid(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
dfp_read_field_def_auth_token(<<34, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_subjects(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                F@_9,
                                TrUserData);
dfp_read_field_def_auth_token(<<42, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_scopes(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              F@_9,
                              TrUserData);
dfp_read_field_def_auth_token(<<50, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_session(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               TrUserData);
dfp_read_field_def_auth_token(<<58, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_client_id(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 TrUserData);
dfp_read_field_def_auth_token(<<72, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_iat(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
dfp_read_field_def_auth_token(<<80, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, TrUserData) ->
    d_field_auth_token_exp(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
dfp_read_field_def_auth_token(<<>>, 0, 0, F@_1, F@_2,
                              F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #{cid => F@_1, aid => F@_2, uid => F@_3,
      subjects => F@_4, scopes => F@_5, session => F@_6,
      client_id => F@_7, iat => F@_8, exp => F@_9};
dfp_read_field_def_auth_token(Other, Z1, Z2, F@_1, F@_2,
                              F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                              TrUserData) ->
    dg_read_field_def_auth_token(Other,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 TrUserData).

dg_read_field_def_auth_token(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_auth_token(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 TrUserData);
dg_read_field_def_auth_token(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_auth_token_cid(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   TrUserData);
        18 ->
            d_field_auth_token_aid(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   TrUserData);
        26 ->
            d_field_auth_token_uid(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   TrUserData);
        34 ->
            d_field_auth_token_subjects(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        TrUserData);
        42 ->
            d_field_auth_token_scopes(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      TrUserData);
        50 ->
            d_field_auth_token_session(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       F@_9,
                                       TrUserData);
        58 ->
            d_field_auth_token_client_id(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         TrUserData);
        72 ->
            d_field_auth_token_iat(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   TrUserData);
        80 ->
            d_field_auth_token_exp(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_auth_token(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           TrUserData);
                1 ->
                    skip_64_auth_token(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       F@_9,
                                       TrUserData);
                2 ->
                    skip_length_delimited_auth_token(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     TrUserData);
                3 ->
                    skip_group_auth_token(Rest,
                                          Key bsr 3,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          TrUserData);
                5 ->
                    skip_32_auth_token(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       F@_9,
                                       TrUserData)
            end
    end;
dg_read_field_def_auth_token(<<>>, 0, 0, F@_1, F@_2,
                             F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #{cid => F@_1, aid => F@_2, uid => F@_3,
      subjects => F@_4, scopes => F@_5, session => F@_6,
      client_id => F@_7, iat => F@_8, exp => F@_9}.

d_field_auth_token_cid(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_cid(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
d_field_auth_token_cid(<<0:1, X:7, Rest/binary>>, N,
                       Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  NewFValue,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_aid(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_aid(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
d_field_auth_token_aid(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  NewFValue,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_uid(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_uid(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
d_field_auth_token_uid(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  NewFValue,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_subjects(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_subjects(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                F@_9,
                                TrUserData);
d_field_auth_token_subjects(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
                            F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  NewFValue,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_scopes(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                          F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_scopes(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              F@_9,
                              TrUserData);
d_field_auth_token_scopes(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
                          F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  NewFValue,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_session(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_session(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               TrUserData);
d_field_auth_token_session(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
                           F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  NewFValue,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_client_id(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_client_id(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 TrUserData);
d_field_auth_token_client_id(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
                             F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  NewFValue,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_iat(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_iat(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
d_field_auth_token_iat(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
                       TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:64/signed-native>> = <<(X bsl N +
                                                                Acc):64/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  NewFValue,
                                  F@_9,
                                  TrUserData).

d_field_auth_token_exp(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, TrUserData)
    when N < 57 ->
    d_field_auth_token_exp(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
d_field_auth_token_exp(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
                       TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:64/signed-native>> = <<(X bsl N +
                                                                Acc):64/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_auth_token(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  NewFValue,
                                  TrUserData).

skip_varint_auth_token(<<1:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, TrUserData) ->
    skip_varint_auth_token(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           TrUserData);
skip_varint_auth_token(<<0:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, TrUserData) ->
    dfp_read_field_def_auth_token(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

skip_length_delimited_auth_token(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                 F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_auth_token(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     F@_6,
                                     F@_7,
                                     F@_8,
                                     F@_9,
                                     TrUserData);
skip_length_delimited_auth_token(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                 F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_token(Rest2,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

skip_group_auth_token(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_token(Rest,
                                  0,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

skip_32_auth_token(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                   TrUserData) ->
    dfp_read_field_def_auth_token(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

skip_64_auth_token(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                   TrUserData) ->
    dfp_read_field_def_auth_token(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        access_token ->
            merge_msg_access_token(Prev, New, TrUserData);
        auth_token ->
            merge_msg_auth_token(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_access_token/3}).
merge_msg_access_token(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{access_token := NFaccess_token}} ->
            S1#{access_token => NFaccess_token};
        {#{access_token := PFaccess_token}, _} ->
            S1#{access_token => PFaccess_token};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_token/3}).
merge_msg_auth_token(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{cid := NFcid}} -> S1#{cid => NFcid};
             {#{cid := PFcid}, _} -> S1#{cid => PFcid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{aid := NFaid}} -> S2#{aid => NFaid};
             {#{aid := PFaid}, _} -> S2#{aid => PFaid};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{uid := NFuid}} -> S3#{uid => NFuid};
             {#{uid := PFuid}, _} -> S3#{uid => PFuid};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{subjects := NFsubjects}} ->
                 S4#{subjects => NFsubjects};
             {#{subjects := PFsubjects}, _} ->
                 S4#{subjects => PFsubjects};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{scopes := NFscopes}} -> S5#{scopes => NFscopes};
             {#{scopes := PFscopes}, _} -> S5#{scopes => PFscopes};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{session := NFsession}} ->
                 S6#{session => NFsession};
             {#{session := PFsession}, _} ->
                 S6#{session => PFsession};
             _ -> S6
         end,
    S8 = case {PMsg, NMsg} of
             {_, #{client_id := NFclient_id}} ->
                 S7#{client_id => NFclient_id};
             {#{client_id := PFclient_id}, _} ->
                 S7#{client_id => PFclient_id};
             _ -> S7
         end,
    S9 = case {PMsg, NMsg} of
             {_, #{iat := NFiat}} -> S8#{iat => NFiat};
             {#{iat := PFiat}, _} -> S8#{iat => PFiat};
             _ -> S8
         end,
    case {PMsg, NMsg} of
        {_, #{exp := NFexp}} -> S9#{exp => NFexp};
        {#{exp := PFexp}, _} -> S9#{exp => PFexp};
        _ -> S9
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        access_token ->
            v_msg_access_token(Msg, [MsgName], TrUserData);
        auth_token ->
            v_msg_auth_token(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_access_token/3}).
-dialyzer({nowarn_function,v_msg_access_token/3}).
v_msg_access_token(#{} = M, Path, TrUserData) ->
    case M of
        #{access_token := F1} ->
            v_type_string(F1, [access_token | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (access_token) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_access_token(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   access_token},
                  M,
                  Path);
v_msg_access_token(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, access_token}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_token/3}).
-dialyzer({nowarn_function,v_msg_auth_token/3}).
v_msg_auth_token(#{} = M, Path, TrUserData) ->
    case M of
        #{cid := F1} ->
            v_type_string(F1, [cid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{aid := F2} ->
            v_type_string(F2, [aid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{uid := F3} ->
            v_type_string(F3, [uid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{subjects := F4} ->
            v_type_string(F4, [subjects | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{scopes := F5} ->
            v_type_string(F5, [scopes | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{session := F6} ->
            v_type_string(F6, [session | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{client_id := F7} ->
            v_type_string(F7, [client_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{iat := F8} ->
            v_type_int64(F8, [iat | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{exp := F9} ->
            v_type_int64(F9, [exp | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (cid) -> ok;
                      (aid) -> ok;
                      (uid) -> ok;
                      (subjects) -> ok;
                      (scopes) -> ok;
                      (session) -> ok;
                      (client_id) -> ok;
                      (iat) -> ok;
                      (exp) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_token(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   auth_token},
                  M,
                  Path);
v_msg_auth_token(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, auth_token}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
         N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
                  N,
                  Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, access_token},
      [#{name => access_token, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, auth_token},
      [#{name => cid, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => aid, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => uid, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []},
       #{name => subjects, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []},
       #{name => scopes, fnum => 5, rnum => 6, type => string,
         occurrence => optional, opts => []},
       #{name => session, fnum => 6, rnum => 7, type => string,
         occurrence => optional, opts => []},
       #{name => client_id, fnum => 7, rnum => 8,
         type => string, occurrence => optional, opts => []},
       #{name => iat, fnum => 9, rnum => 9, type => int64,
         occurrence => optional, opts => []},
       #{name => exp, fnum => 10, rnum => 10, type => int64,
         occurrence => optional, opts => []}]}].


get_msg_names() -> [access_token, auth_token].


get_group_names() -> [].


get_msg_or_group_names() -> [access_token, auth_token].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(access_token) ->
    [#{name => access_token, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(auth_token) ->
    [#{name => cid, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => aid, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => uid, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => subjects, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => scopes, fnum => 5, rnum => 6, type => string,
       occurrence => optional, opts => []},
     #{name => session, fnum => 6, rnum => 7, type => string,
       occurrence => optional, opts => []},
     #{name => client_id, fnum => 7, rnum => 8,
       type => string, occurrence => optional, opts => []},
     #{name => iat, fnum => 9, rnum => 9, type => int64,
       occurrence => optional, opts => []},
     #{name => exp, fnum => 10, rnum => 10, type => int64,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() ->
    ['auth_authentication.AuthenticationService'].


get_service_def('auth_authentication.AuthenticationService') ->
    {{service, 'auth_authentication.AuthenticationService'},
     [#{name => 'Decrypt', input => access_token,
        output => auth_token, input_stream => false,
        output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('auth_authentication.AuthenticationService') ->
    ['Decrypt'];
get_rpc_names(_) -> error.


find_rpc_def('auth_authentication.AuthenticationService',
             RpcName) ->
    'find_rpc_def_auth_authentication.AuthenticationService'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_auth_authentication.AuthenticationService'('Decrypt') ->
    #{name => 'Decrypt', input => access_token,
      output => auth_token, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_auth_authentication.AuthenticationService'(_) ->
    error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"auth_authentication.AuthenticationService">>) ->
    'auth_authentication.AuthenticationService';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('auth_authentication.AuthenticationService') ->
    <<"auth_authentication.AuthenticationService">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"auth_authentication.AuthenticationService">>, <<"Decrypt">>) ->
    {'auth_authentication.AuthenticationService',
     'Decrypt'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('auth_authentication.AuthenticationService',
                               'Decrypt') ->
    {<<"auth_authentication.AuthenticationService">>, <<"Decrypt">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"auth_authentication.AccessToken">>) -> access_token;
fqbin_to_msg_name(<<"auth_authentication.AuthToken">>) -> auth_token;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(access_token) -> <<"auth_authentication.AccessToken">>;
msg_name_to_fqbin(auth_token) -> <<"auth_authentication.AuthToken">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> auth_authentication.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "auth_authentication.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["auth_authentication.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["auth_authentication"].


get_msg_containment("auth_authentication") ->
    [access_token, auth_token];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("auth_authentication") ->
    auth_authentication;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("auth_authentication") ->
    ['auth_authentication.AuthenticationService'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("auth_authentication") ->
    [{'auth_authentication.AuthenticationService',
      'Decrypt'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("auth_authentication") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"auth_authentication.AuthToken">>) ->
    "auth_authentication";
get_proto_by_msg_name_as_fqbin(<<"auth_authentication.AccessToken">>) ->
    "auth_authentication";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"auth_authentication.AuthenticationService">>) ->
    "auth_authentication";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"auth_authentication">>) ->
    ["auth_authentication"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
